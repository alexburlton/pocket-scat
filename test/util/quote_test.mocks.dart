// Mocks generated by Mockito 5.0.3 from annotations
// in pocket_scat/test/util/quote_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;
import 'dart:io' as _i2;
import 'dart:typed_data' as _i6;

import 'package:audioplayers/audio_cache.dart' as _i4;
import 'package:audioplayers/audioplayers.dart' as _i3;
import 'package:flutter/src/widgets/framework.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:pocket_scat/util/file_sharer.dart' as _i7;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeFile extends _i1.Fake implements _i2.File {}

class _FakeAudioPlayer extends _i1.Fake implements _i3.AudioPlayer {}

/// A class which mocks [AudioCache].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioCache extends _i1.Mock implements _i4.AudioCache {
  MockAudioCache() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Map<String, _i2.File> get loadedFiles =>
      (super.noSuchMethod(Invocation.getter(#loadedFiles),
          returnValue: <String, _i2.File>{}) as Map<String, _i2.File>);
  @override
  set loadedFiles(Map<String, _i2.File>? _loadedFiles) =>
      super.noSuchMethod(Invocation.setter(#loadedFiles, _loadedFiles),
          returnValueForMissingStub: null);
  @override
  String get prefix =>
      (super.noSuchMethod(Invocation.getter(#prefix), returnValue: '')
          as String);
  @override
  set prefix(String? _prefix) =>
      super.noSuchMethod(Invocation.setter(#prefix, _prefix),
          returnValueForMissingStub: null);
  @override
  bool get respectSilence => (super
          .noSuchMethod(Invocation.getter(#respectSilence), returnValue: false)
      as bool);
  @override
  set respectSilence(bool? _respectSilence) =>
      super.noSuchMethod(Invocation.setter(#respectSilence, _respectSilence),
          returnValueForMissingStub: null);
  @override
  bool get duckAudio =>
      (super.noSuchMethod(Invocation.getter(#duckAudio), returnValue: false)
          as bool);
  @override
  set duckAudio(bool? _duckAudio) =>
      super.noSuchMethod(Invocation.setter(#duckAudio, _duckAudio),
          returnValueForMissingStub: null);
  @override
  void clear(String? fileName) =>
      super.noSuchMethod(Invocation.method(#clear, [fileName]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<_i2.File> fetchToMemory(String? fileName) =>
      (super.noSuchMethod(Invocation.method(#fetchToMemory, [fileName]),
          returnValue: Future.value(_FakeFile())) as _i5.Future<_i2.File>);
  @override
  _i5.Future<List<_i2.File>> loadAll(List<String>? fileNames) =>
      (super.noSuchMethod(Invocation.method(#loadAll, [fileNames]),
              returnValue: Future.value(<_i2.File>[]))
          as _i5.Future<List<_i2.File>>);
  @override
  _i5.Future<_i2.File> load(String? fileName) =>
      (super.noSuchMethod(Invocation.method(#load, [fileName]),
          returnValue: Future.value(_FakeFile())) as _i5.Future<_i2.File>);
  @override
  _i5.Future<_i3.AudioPlayer> play(String? fileName,
          {double? volume = 1.0,
          bool? isNotification,
          _i3.PlayerMode? mode = _i3.PlayerMode.MEDIA_PLAYER,
          bool? stayAwake = false,
          bool? recordingActive = false,
          bool? duckAudio}) =>
      (super.noSuchMethod(
              Invocation.method(#play, [
                fileName
              ], {
                #volume: volume,
                #isNotification: isNotification,
                #mode: mode,
                #stayAwake: stayAwake,
                #recordingActive: recordingActive,
                #duckAudio: duckAudio
              }),
              returnValue: Future.value(_FakeAudioPlayer()))
          as _i5.Future<_i3.AudioPlayer>);
  @override
  _i5.Future<_i3.AudioPlayer> playBytes(_i6.Uint8List? fileBytes,
          {double? volume = 1.0,
          bool? isNotification,
          _i3.PlayerMode? mode = _i3.PlayerMode.MEDIA_PLAYER,
          bool? loop = false,
          bool? stayAwake = false,
          bool? recordingActive = false}) =>
      (super.noSuchMethod(
              Invocation.method(#playBytes, [
                fileBytes
              ], {
                #volume: volume,
                #isNotification: isNotification,
                #mode: mode,
                #loop: loop,
                #stayAwake: stayAwake,
                #recordingActive: recordingActive
              }),
              returnValue: Future.value(_FakeAudioPlayer()))
          as _i5.Future<_i3.AudioPlayer>);
  @override
  _i5.Future<_i3.AudioPlayer> loop(String? fileName,
          {double? volume = 1.0,
          bool? isNotification,
          _i3.PlayerMode? mode = _i3.PlayerMode.MEDIA_PLAYER,
          bool? stayAwake = false}) =>
      (super.noSuchMethod(
              Invocation.method(#loop, [
                fileName
              ], {
                #volume: volume,
                #isNotification: isNotification,
                #mode: mode,
                #stayAwake: stayAwake
              }),
              returnValue: Future.value(_FakeAudioPlayer()))
          as _i5.Future<_i3.AudioPlayer>);
  @override
  _i5.Future<String> getAbsoluteUrl(String? fileName) =>
      (super.noSuchMethod(Invocation.method(#getAbsoluteUrl, [fileName]),
          returnValue: Future.value('')) as _i5.Future<String>);
}

/// A class which mocks [AudioPlayer].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioPlayer extends _i1.Mock implements _i3.AudioPlayer {
  MockAudioPlayer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get playerId =>
      (super.noSuchMethod(Invocation.getter(#playerId), returnValue: '')
          as String);
  @override
  set playerId(String? _playerId) =>
      super.noSuchMethod(Invocation.setter(#playerId, _playerId),
          returnValueForMissingStub: null);
  @override
  _i3.PlayerMode get mode => (super.noSuchMethod(Invocation.getter(#mode),
      returnValue: _i3.PlayerMode.MEDIA_PLAYER) as _i3.PlayerMode);
  @override
  set mode(_i3.PlayerMode? _mode) =>
      super.noSuchMethod(Invocation.setter(#mode, _mode),
          returnValueForMissingStub: null);
  @override
  _i3.AudioPlayerState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _i3.AudioPlayerState.STOPPED) as _i3.AudioPlayerState);
  @override
  set state(_i3.AudioPlayerState? state) =>
      super.noSuchMethod(Invocation.setter(#state, state),
          returnValueForMissingStub: null);
  @override
  set playingRouteState(_i3.PlayingRouteState? routeState) =>
      super.noSuchMethod(Invocation.setter(#playingRouteState, routeState),
          returnValueForMissingStub: null);
  @override
  set notificationState(_i3.AudioPlayerState? state) =>
      super.noSuchMethod(Invocation.setter(#notificationState, state),
          returnValueForMissingStub: null);
  @override
  _i5.Stream<_i3.AudioPlayerState> get onPlayerStateChanged =>
      (super.noSuchMethod(Invocation.getter(#onPlayerStateChanged),
              returnValue: Stream<_i3.AudioPlayerState>.empty())
          as _i5.Stream<_i3.AudioPlayerState>);
  @override
  _i5.Stream<_i3.AudioPlayerState> get onNotificationPlayerStateChanged =>
      (super.noSuchMethod(Invocation.getter(#onNotificationPlayerStateChanged),
              returnValue: Stream<_i3.AudioPlayerState>.empty())
          as _i5.Stream<_i3.AudioPlayerState>);
  @override
  _i5.Stream<Duration> get onAudioPositionChanged =>
      (super.noSuchMethod(Invocation.getter(#onAudioPositionChanged),
          returnValue: Stream<Duration>.empty()) as _i5.Stream<Duration>);
  @override
  _i5.Stream<Duration> get onDurationChanged =>
      (super.noSuchMethod(Invocation.getter(#onDurationChanged),
          returnValue: Stream<Duration>.empty()) as _i5.Stream<Duration>);
  @override
  _i5.Stream<void> get onPlayerCompletion =>
      (super.noSuchMethod(Invocation.getter(#onPlayerCompletion),
          returnValue: Stream<void>.empty()) as _i5.Stream<void>);
  @override
  _i5.Stream<void> get onSeekComplete =>
      (super.noSuchMethod(Invocation.getter(#onSeekComplete),
          returnValue: Stream<void>.empty()) as _i5.Stream<void>);
  @override
  _i5.Stream<String> get onPlayerError =>
      (super.noSuchMethod(Invocation.getter(#onPlayerError),
          returnValue: Stream<String>.empty()) as _i5.Stream<String>);
  @override
  _i5.Stream<_i3.PlayerControlCommand> get onPlayerCommand =>
      (super.noSuchMethod(Invocation.getter(#onPlayerCommand),
              returnValue: Stream<_i3.PlayerControlCommand>.empty())
          as _i5.Stream<_i3.PlayerControlCommand>);
  @override
  _i5.Future<bool> monitorNotificationStateChanges(
          void Function(_i3.AudioPlayerState)? callback) =>
      (super.noSuchMethod(
          Invocation.method(#monitorNotificationStateChanges, [callback]),
          returnValue: Future.value(false)) as _i5.Future<bool>);
  @override
  _i5.Future<int> play(String? url,
          {bool? isLocal,
          double? volume = 1.0,
          Duration? position,
          bool? respectSilence = false,
          bool? stayAwake = false,
          bool? duckAudio = false,
          bool? recordingActive = false}) =>
      (super.noSuchMethod(
          Invocation.method(#play, [
            url
          ], {
            #isLocal: isLocal,
            #volume: volume,
            #position: position,
            #respectSilence: respectSilence,
            #stayAwake: stayAwake,
            #duckAudio: duckAudio,
            #recordingActive: recordingActive
          }),
          returnValue: Future.value(0)) as _i5.Future<int>);
  @override
  _i5.Future<int> playBytes(_i6.Uint8List? bytes,
          {double? volume = 1.0,
          Duration? position,
          bool? respectSilence = false,
          bool? stayAwake = false,
          bool? duckAudio = false,
          bool? recordingActive = false}) =>
      (super.noSuchMethod(
          Invocation.method(#playBytes, [
            bytes
          ], {
            #volume: volume,
            #position: position,
            #respectSilence: respectSilence,
            #stayAwake: stayAwake,
            #duckAudio: duckAudio,
            #recordingActive: recordingActive
          }),
          returnValue: Future.value(0)) as _i5.Future<int>);
  @override
  _i5.Future<int> pause() => (super.noSuchMethod(Invocation.method(#pause, []),
      returnValue: Future.value(0)) as _i5.Future<int>);
  @override
  _i5.Future<int> stop() => (super.noSuchMethod(Invocation.method(#stop, []),
      returnValue: Future.value(0)) as _i5.Future<int>);
  @override
  _i5.Future<int> resume() =>
      (super.noSuchMethod(Invocation.method(#resume, []),
          returnValue: Future.value(0)) as _i5.Future<int>);
  @override
  _i5.Future<int> release() =>
      (super.noSuchMethod(Invocation.method(#release, []),
          returnValue: Future.value(0)) as _i5.Future<int>);
  @override
  _i5.Future<int> seek(Duration? position) =>
      (super.noSuchMethod(Invocation.method(#seek, [position]),
          returnValue: Future.value(0)) as _i5.Future<int>);
  @override
  _i5.Future<int> setVolume(double? volume) =>
      (super.noSuchMethod(Invocation.method(#setVolume, [volume]),
          returnValue: Future.value(0)) as _i5.Future<int>);
  @override
  _i5.Future<int> setReleaseMode(_i3.ReleaseMode? releaseMode) =>
      (super.noSuchMethod(Invocation.method(#setReleaseMode, [releaseMode]),
          returnValue: Future.value(0)) as _i5.Future<int>);
  @override
  _i5.Future<int> setPlaybackRate({double? playbackRate = 1.0}) =>
      (super.noSuchMethod(
          Invocation.method(
              #setPlaybackRate, [], {#playbackRate: playbackRate}),
          returnValue: Future.value(0)) as _i5.Future<int>);
  @override
  _i5.Future<dynamic> setNotification(
          {String? title = r'',
          String? albumTitle = r'',
          String? artist = r'',
          String? imageUrl = r'',
          Duration? forwardSkipInterval = const Duration(seconds: 0),
          Duration? backwardSkipInterval = const Duration(seconds: 0),
          Duration? duration = const Duration(seconds: 0),
          Duration? elapsedTime = const Duration(seconds: 0),
          bool? hasPreviousTrack = false,
          bool? hasNextTrack = false}) =>
      (super.noSuchMethod(
          Invocation.method(#setNotification, [], {
            #title: title,
            #albumTitle: albumTitle,
            #artist: artist,
            #imageUrl: imageUrl,
            #forwardSkipInterval: forwardSkipInterval,
            #backwardSkipInterval: backwardSkipInterval,
            #duration: duration,
            #elapsedTime: elapsedTime,
            #hasPreviousTrack: hasPreviousTrack,
            #hasNextTrack: hasNextTrack
          }),
          returnValue: Future.value(null)) as _i5.Future<dynamic>);
  @override
  _i5.Future<int> setUrl(String? url,
          {bool? isLocal = false, bool? respectSilence = false}) =>
      (super.noSuchMethod(
          Invocation.method(#setUrl, [url],
              {#isLocal: isLocal, #respectSilence: respectSilence}),
          returnValue: Future.value(0)) as _i5.Future<int>);
  @override
  _i5.Future<int> getDuration() =>
      (super.noSuchMethod(Invocation.method(#getDuration, []),
          returnValue: Future.value(0)) as _i5.Future<int>);
  @override
  _i5.Future<int> getCurrentPosition() =>
      (super.noSuchMethod(Invocation.method(#getCurrentPosition, []),
          returnValue: Future.value(0)) as _i5.Future<int>);
  @override
  _i5.Future<void> dispose() =>
      (super.noSuchMethod(Invocation.method(#dispose, []),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i5.Future<void>);
  @override
  _i5.Future<int> earpieceOrSpeakersToggle() =>
      (super.noSuchMethod(Invocation.method(#earpieceOrSpeakersToggle, []),
          returnValue: Future.value(0)) as _i5.Future<int>);
  @override
  bool isLocalUrl(String? url) =>
      (super.noSuchMethod(Invocation.method(#isLocalUrl, [url]),
          returnValue: false) as bool);
}

/// A class which mocks [FileSharer].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileSharer extends _i1.Mock implements _i7.FileSharer {
  MockFileSharer() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> shareFile(String? name, String? filename,
          _i8.BuildContext? context, String? mimeType) =>
      (super.noSuchMethod(
          Invocation.method(#shareFile, [name, filename, context, mimeType]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i5.Future<void>);
}
